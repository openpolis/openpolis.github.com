<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Openpolis Lab</title><link>http://lab.openpolis.it/</link><description></description><atom:link href="http://lab.openpolis.it/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Mon, 01 Jul 2013 07:30:00 +0200</lastBuildDate><item><title>Executing Django views</title><link>http://lab.openpolis.it/executing-django-views.html</link><description>&lt;p&gt;The code within django views is executed during the &lt;span class="caps"&gt;HTTP&lt;/span&gt; request-response workflow and there is little chance of
executing it outside that&amp;nbsp;context.&lt;/p&gt;
&lt;p&gt;There can be, however situations in which executing it is exactly what you want. For example if you need to test
the views &lt;em&gt;efficiently&lt;/em&gt;, or you want to generate context caches through management&amp;nbsp;tasks.&lt;/p&gt;
&lt;p&gt;Starting from
&lt;a class="reference external" href="http://tech.novapost.fr/django-unit-test-your-views-en.html"&gt;http://tech.novapost.fr/django-unit-test-your-views-en.html&lt;/a&gt;, where a Django&amp;#8217;s test client replacement is described,
I&amp;#8217;ve implemented a management task to execute the &lt;tt class="docutils literal"&gt;get_context_data&lt;/tt&gt; method of a class-based view.
This allowed me to easily debug the code, understanding some of the quirks in it, and to use it more generally, as a tool to manually (re-)generate the related context cache, without using a headless&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;At the core of the technique, is the following function, that receives a &lt;strong&gt;&lt;span class="caps"&gt;CBV&lt;/span&gt; instance&lt;/strong&gt;, along&amp;nbsp;with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the&amp;nbsp;request,&lt;/li&gt;
&lt;li&gt;an object instance (since we&amp;#8217;re working with a DetailView&amp;nbsp;class),&lt;/li&gt;
&lt;li&gt;the same &lt;tt class="docutils literal"&gt;args&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;kwargs&lt;/tt&gt; that&amp;#8217;d be used in &lt;tt class="docutils literal"&gt;reverse()&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
def setup_view(view, request, object, *args, **kwargs):
    &amp;quot;&amp;quot;&amp;quot;Mimic as_view() returned callable, but returns view instance.

    args and kwargs are the same you would pass to ``reverse()``

    &amp;quot;&amp;quot;&amp;quot;
    view.request = request
    view.object = object
    view.args = args
    view.kwargs = kwargs
    return view
&lt;/pre&gt;
&lt;p&gt;Having this function handy in some package, allows you to write the following piece of&amp;nbsp;code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
from myutils_package import setup_view

view = setup_view(
    MyView(),
    RequestFactory().get(&amp;quot;/mypath/{0}&amp;quot;.format(slug)),
    obj_instance
)

context = view.get_context_data()
&lt;/pre&gt;
&lt;p&gt;that will compute the view&amp;#8217;s context, as if a client had visited the url, with a get&amp;nbsp;request.&lt;/p&gt;
&lt;p&gt;If the class definition contains a cache decorator, then the cache is&amp;nbsp;stored:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
class MyView(DetailView):
    model = MyModel
    context_object_name = 'mymodel'

    &amp;#64;cached_context
    def get_context_data(self, **kwargs):

        context = super(MyModelView, self).get_context_data(**kwargs)
        ...
        return context
&lt;/pre&gt;
&lt;p&gt;The decorator&amp;nbsp;definition:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
def cached_context(get_context_data):
    &amp;quot;&amp;quot;&amp;quot;
    This decorator is used to cache the ``get_context_data()`` method
    called by a ``get()`` or ``post()`` in the views.
    It generates a unique key for the request,
    checks if the key is in the cache:
    if it is, then it returns it,
    else it will generate and save the key, before returning it.
    &amp;quot;&amp;quot;&amp;quot;

    def decorator(self, **kwargs):
        key = 'context' + self.request.get_full_path()
        context = cache.get(key)
        if context is None:
            context = get_context_data(self, **kwargs)
            cache.set(key, context)
        return context
    return decorator
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Mon, 01 Jul 2013 07:30:00 +0200</pubDate><guid>tag:lab.openpolis.it,2013-07-01:executing-django-views.html</guid><category>django</category><category>python</category></item><item><title>Fixing the “can’t start the AWT” bug for Tomcat6</title><link>http://lab.openpolis.it/fixing-the-cant-start-the-awt-bug-for-tomcat6.html</link><description>&lt;p&gt;After a Java upgrade on the &lt;span class="caps"&gt;OSX&lt;/span&gt;, Tomcat6 is not starting properly. The log shows a Java&amp;nbsp;error:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
2013-06-27 14:45:40.300 jsvc[57146:203] Apple AWT Java VM was loaded on first thread -- can't start AWT.
Jun 27, 2013 2:45:40 PM org.apache.catalina.startup.Bootstrap initClassLoaders
SEVERE: Class loader creation threw exception
java.lang.InternalError: Can't start the AWT because Java was started on the first thread.  Make sure StartOnFirstThread is not specified in your application's Info.plist ...
&lt;/pre&gt;
&lt;p&gt;To have it properly start through &lt;tt class="docutils literal"&gt;tomcatctl&lt;/tt&gt;, you need to add the &lt;tt class="docutils literal"&gt;awt.headless&lt;/tt&gt; option to &lt;tt class="docutils literal"&gt;JAVA_OPTS&lt;/tt&gt;.
This can be done, by modifying the &lt;tt class="docutils literal"&gt;/opt/local/share/java/tomcat6/conf/setenv.local&lt;/tt&gt; file,
and appending this line to&amp;nbsp;it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
export JAVA_OPTS=&amp;quot;$JAVA_OPTS -Djava.awt.headless=true&amp;quot;
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Tue, 25 Jun 2013 14:30:00 +0200</pubDate><guid>tag:lab.openpolis.it,2013-06-25:fixing-the-cant-start-the-awt-bug-for-tomcat6.html</guid><category>tomcat6</category><category>java</category><category>macports</category><category>osx</category></item><item><title>How to configure bash completion in ubuntu</title><link>http://lab.openpolis.it/how-to-configure-bash-completion-in-ubuntu.html</link><description>&lt;p&gt;Working almost always in the terminal of a linux box, the &lt;em&gt;autocompletion&lt;/em&gt; feature enhances your speed and comfort, a&amp;nbsp;lot.&lt;/p&gt;
&lt;p&gt;Under Ubuntu, autocompletion is installable, if not already installed,&amp;nbsp;with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install bash_completion
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.bashrc&lt;/span&gt;&lt;/tt&gt; config file should contain these&amp;nbsp;lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
if [ -f /etc/bash_completion ] &amp;amp;&amp;amp; ! shopt -oq posix; then
    . /etc/bash_completion
fi
&lt;/pre&gt;
&lt;p&gt;If things are set this way, then you will be able to autocomplete regularly (and save a lot of&amp;nbsp;time).&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Note:&lt;/dt&gt;
&lt;dd&gt;In &lt;tt class="docutils literal"&gt;/etc/bash_completion.d&lt;/tt&gt; you can find the rather cryptic scripts enabling autocomplete patterns inside various unix&amp;nbsp;contexts.&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Thu, 11 Apr 2013 16:30:00 +0200</pubDate><guid>tag:lab.openpolis.it,2013-04-11:how-to-configure-bash-completion-in-ubuntu.html</guid><category>bash</category><category>terminal</category></item><item><title>How to install solr on tomcat7, over Ubuntu 12.04</title><link>http://lab.openpolis.it/how-to-install-solr-on-tomcat7-over-ubuntu-1204.html</link><description>&lt;div class="section" id="tomcat7"&gt;
&lt;h2&gt;Tomcat7&lt;/h2&gt;
&lt;p&gt;Ubuntu 12.04 comes with &lt;a class="reference external" href="http://tomcat.apache.org/"&gt;tomcat&lt;/a&gt; easily installable as a package (you need&amp;nbsp;jdk):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install default-jdk tomcat7 tomcat7-admin tomcat7-user tomcat7-docs
&lt;/pre&gt;
&lt;p&gt;Configure access to the web-admin in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/etc/tomcat7/tomcat-users.xml&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;tomcat-users&amp;gt;
  &amp;lt;role rolename=&amp;quot;manager-gui&amp;quot;/&amp;gt;
  &amp;lt;user username=&amp;quot;manager&amp;quot; password=&amp;quot;S3krEt&amp;quot; roles=&amp;quot;manager-gui&amp;quot;/&amp;gt;
&amp;lt;/tomcat-users&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The tomcat management console is now accessible, through authentication at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;span class="caps"&gt;HOST&lt;/span&gt;:8080/manager/html&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;Please, do change username and password in your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;tomcat-users.xml&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solr"&gt;
&lt;h2&gt;Solr&lt;/h2&gt;
&lt;p&gt;It can be useful to have different, isolated instances of &lt;a class="reference external" href="http://lucene.apache.org/solr/"&gt;solr&lt;/a&gt; running, corresponding to different solr versions
(i.e. 1.2, 1.4,  3.4, &amp;#8230;). One of the instances could be a &lt;em&gt;multicore&lt;/em&gt; solr instance, able to host multiple indexes under a single&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;This is possible by creating different &lt;strong&gt;contexts&lt;/strong&gt; inside &lt;tt class="docutils literal"&gt;/etc/tomcat7/Catalina/localhost/&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;open_parlamento.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Context docBase=&amp;quot;/home/solr/open_parlamento/apache-solr-1.4.0.war&amp;quot; debug=&amp;quot;0&amp;quot; crossContext=&amp;quot;true&amp;quot; &amp;gt;
   &amp;lt;Environment name=&amp;quot;solr/home&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;/home/solr/open_parlamento&amp;quot; override=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;open_politici.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Context docBase=&amp;quot;/home/solr/open_politici/apache-solr-1.2.0.war&amp;quot; debug=&amp;quot;0&amp;quot; crossContext=&amp;quot;true&amp;quot; &amp;gt;
   &amp;lt;Environment name=&amp;quot;solr/home&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;/home/solr/open_politici&amp;quot; override=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;multicore.xml&lt;/strong&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;Context docBase=&amp;quot;/home/solr/multicore/apache-solr-3.4.0.war&amp;quot; debug=&amp;quot;0&amp;quot; crossContext=&amp;quot;true&amp;quot; &amp;gt;
   &amp;lt;Environment name=&amp;quot;solr/home&amp;quot; type=&amp;quot;java.lang.String&amp;quot; value=&amp;quot;/home/solr/multicore/cores&amp;quot; override=&amp;quot;true&amp;quot; /&amp;gt;
&amp;lt;/Context&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Create this directory&amp;nbsp;tree:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/home/solr
|- open_parlamento
|  |- apache-solr-1.4.0.war
|  |- data
|  |  |- index
|  |  |  |- ...
|  |- conf
|     |- admin-extra.html
|     |- elevate.xml
|     |- italian-stopwords.txt
|     |- mapping-ISOLatin1Accent.txt
|     |- protwords.txt
|     |- schema.xml
|     |- scripts.conf
|     |- solrconfig.xml
|     |- spellings.txt
|     |- stopwords.txt
|     |- synonyms.txt
|- open_polis
|  |- apache-solr-1.2.0.war
|  |- ...
|- multicore
   |- apache-solr.3.4.0.war
   |- cores
   |  |- solr.xml
   |  |- app1
   |  |  |- conf
   |  |- app2
   |  |  |- conf
   |- data
      |- app1
      |  |- index
      |- app2
         |- index
&lt;/pre&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Note:&lt;/dt&gt;
&lt;dd&gt;You need to download the different versions of the solr war from their web site, and you may eventually need to
download libraries, as pointed in the &lt;tt class="docutils literal"&gt;solrconfig.xml&lt;/tt&gt; file to handle advanced tasks, so &lt;em&gt;your mileage may vary&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;solr.xml&lt;/strong&gt; is the configuration file that points to the various cores in the multicore&amp;nbsp;instance:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; ?&amp;gt;
&amp;lt;solr persistent=&amp;quot;false&amp;quot; sharedLib=&amp;quot;lib&amp;quot;&amp;gt;
  &amp;lt;cores adminPath=&amp;quot;/admin/cores&amp;quot; shareSchema=&amp;quot;true&amp;quot;&amp;gt;
    &amp;lt;core name=&amp;quot;app1&amp;quot;  instanceDir=&amp;quot;app1&amp;quot;  dataDir=&amp;quot;${solr.data.dir:../data}/app1&amp;quot; /&amp;gt;
    &amp;lt;core name=&amp;quot;app2&amp;quot;  instanceDir=&amp;quot;app2&amp;quot;  dataDir=&amp;quot;${solr.data.dir:../data}/app2&amp;quot; /&amp;gt;
  &amp;lt;/cores&amp;gt;
&amp;lt;/solr&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;conf&lt;/tt&gt; directories in &lt;tt class="docutils literal"&gt;cores/appX&lt;/tt&gt; are standard solr conf directories, with all files needed, according to
the solr&amp;nbsp;version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="permissions"&gt;
&lt;h2&gt;Permissions&lt;/h2&gt;
&lt;p&gt;Tomcat is run by the &lt;tt class="docutils literal"&gt;tomcat7&lt;/tt&gt; user, so all the &lt;tt class="docutils literal"&gt;data&lt;/tt&gt; directories need to be writeable to this&amp;nbsp;user:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
chgrp -R tomcat7 /home/solr/open_parlamento/data
chmod -R g+w /home/solr/open_parlamento/data
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="restart"&gt;
&lt;h2&gt;Restart&lt;/h2&gt;
&lt;p&gt;Is needed whenever a tomcat or solr configuration changes. Under&amp;nbsp;ubuntu:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
service tomcat7 restart
&lt;/pre&gt;
&lt;p&gt;The applications are visible under &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;http://&lt;span class="caps"&gt;HOST&lt;/span&gt;:8080/APP_NAME&lt;/span&gt;&lt;/tt&gt; where &lt;tt class="docutils literal"&gt;APP_NAME&lt;/tt&gt; is the name of the context file (&lt;tt class="docutils literal"&gt;open_parlamento&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;open_politici&lt;/tt&gt;) or the name of the core (app1,&amp;nbsp;app2).&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Wed, 10 Apr 2013 15:30:00 +0200</pubDate><guid>tag:lab.openpolis.it,2013-04-10:how-to-install-solr-on-tomcat7-over-ubuntu-1204.html</guid><category>solr</category><category>tomcat</category><category>ubuntu</category></item><item><title>OpenSource in the UK</title><link>http://lab.openpolis.it/opensource-in-the-uk.html</link><description>&lt;p&gt;The &lt;span class="caps"&gt;UK&lt;/span&gt; government issued a beta version of the &lt;a class="reference external" href="https://www.gov.uk/service-manual"&gt;Service Design Manual&lt;/a&gt;, stating guidelines on
how to design digital services according to the &lt;a class="reference external" href="https://www.gov.uk/service-manual/digital-by-default"&gt;Digital by Default Service Standard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Setting a digital service standard is part of the &lt;a class="reference external" href="http://publications.cabinetoffice.gov.uk/digital/"&gt;Governmental Digital Strategy&lt;/a&gt;, which aims at producing public
digital services, &amp;#8220;so good, that people prefer to use&amp;nbsp;them&amp;#8221;.&lt;/p&gt;
&lt;p&gt;The manual is an interesting reading in itself, but the &lt;a class="reference external" href="https://www.gov.uk/service-manual/making-software/open-source.html"&gt;Open Source&lt;/a&gt; section is a&amp;nbsp;must.&lt;/p&gt;
&lt;p&gt;Basically, the &lt;span class="caps"&gt;UK&lt;/span&gt; government is suggesting to use open source software
for operating systems, networking software, web servers, databases and programming&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;The choice is based on the quality of the overall development and maintenance process, not on economic&amp;nbsp;grounds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Wed, 20 Mar 2013 11:16:00 +0100</pubDate><guid>tag:lab.openpolis.it,2013-03-20:opensource-in-the-uk.html</guid><category>politics</category><category>open source</category></item><item><title>Bureaucrats like Github</title><link>http://lab.openpolis.it/bureaucrats-like-github.html</link><description>&lt;p&gt;A &lt;a class="reference external" href="http://radar.oreilly.com/2013/03/github-government-bureaucat-open-source.html?utm_source=feedburner&amp;amp;utm_medium=feed&amp;amp;utm_campaign=Feed%3A+oreilly%2Fradar%2Fatom+(O'Reilly+Radar)"&gt;post&lt;/a&gt; on &lt;a class="reference external" href="http://radar.oreilly.com"&gt;Oreilly Radar&lt;/a&gt; informs us that &lt;a class="reference external" href="http://www.github.com"&gt;Github&lt;/a&gt; is trending as the social-repository of choice for governments and public institutions
who want to publish data, standards and source&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;Some remarkable&amp;nbsp;examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;US&lt;/span&gt; - &lt;a class="reference external" href="https://github.com/WhiteHouse"&gt;https://github.com/WhiteHouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;NASA&lt;/span&gt; - &lt;a class="reference external" href="https://github.com/nasa"&gt;https://github.com/nasa&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UK&lt;/span&gt; - &lt;a class="reference external" href="https://github.com/alphagov"&gt;https://github.com/alphagov&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canada - &lt;a class="reference external" href="https://github.com/pwgsc"&gt;https://github.com/pwgsc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Finlandia - &lt;a class="reference external" href="https://github.com/avoinministerio"&gt;https://github.com/avoinministerio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Buenos Aires - &lt;a class="reference external" href="https://github.com/gcba"&gt;https://github.com/gcba&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Github also destined an evangelist to the task.
The objective: change the way governments actually face (and solve) &lt;span class="caps"&gt;ICT&lt;/span&gt; problems, studying similar solutions in the social repository,
and implementing from scratch only when really&amp;nbsp;required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">guglielmo</dc:creator><pubDate>Fri, 15 Mar 2013 11:00:00 +0100</pubDate><guid>tag:lab.openpolis.it,2013-03-15:bureaucrats-like-github.html</guid><category>politics</category><category>open source</category></item><item><title>BLOG TODO LIST</title><link>http://lab.openpolis.it/blog-todo-list.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;UPDATED&lt;/span&gt;&lt;/strong&gt; by guglielmo Nov, 11th,&amp;nbsp;2012&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;refine blog deploy flow (make/fab file) -&amp;nbsp;&lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;make a theme - &lt;span class="caps"&gt;OK&lt;/span&gt;&amp;nbsp;(sortof)&lt;/li&gt;
&lt;li&gt;add&amp;nbsp;links&lt;/li&gt;
&lt;li&gt;disqus -&amp;nbsp;&lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;google analytics - not&amp;nbsp;&lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">danielef</dc:creator><pubDate>Mon, 17 Sep 2012 19:02:00 +0200</pubDate><guid>tag:lab.openpolis.it,2012-09-17:blog-todo-list.html</guid></item></channel></rss>